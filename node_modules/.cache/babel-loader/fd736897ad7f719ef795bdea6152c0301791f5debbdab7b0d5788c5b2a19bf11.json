{"ast":null,"code":"var _jsxFileName = \"/Users/inoue-no/Documents/GitHub/typescript_lesson/src/App.tsx\";\nimport React from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst name = \"hello\";\nlet nameChange = \"hello\";\nnameChange = 'hello2';\nlet username = \"Hello\";\nlet dummNum = 2;\nlet bool = true;\nlet array = [true, false, true];\n\n// 配列\nlet array2 = [0, 1, \"hello\"];\n\n// オブジェクト\n\nlet nameobj = {\n  first: \"Yamada\",\n  last: \"Taro\"\n};\nconst func1 = (x, y) => {\n  return x + y;\n};\n\n// inetersection Type 複数のタイプを結合\n\nconst userA = {\n  age: 30,\n  city: \"tokyo\",\n  username: \"xxx\",\n  password: \"yyy\"\n};\n// Union Types\nlet value;\nvalue = 10;\nlet arrayUni;\narray = [0, 1];\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","name","nameChange","username","dummNum","bool","array","array2","nameobj","first","last","func1","x","y","userA","age","city","password","value","arrayUni","App"],"sources":["/Users/inoue-no/Documents/GitHub/typescript_lesson/src/App.tsx"],"sourcesContent":["import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nconst name =\"hello\";\nlet nameChange =\"hello\"\nnameChange ='hello2';\n\nlet username = \"Hello\";\n\nlet dummNum =2;\n\nlet bool =true;\n\nlet array =[true , false ,true]\n\n// 配列\nlet array2 = [0,1,\"hello\"];\n\n// オブジェクト\ninterface NAME {\n  first:string,\n  last:string | null,\n}\n\nlet nameobj :NAME ={first:\"Yamada\",last:\"Taro\"}\n\nconst func1 =(x : number, y:number):number =>{\n  return x + y;\n}\n\n// inetersection Type 複数のタイプを結合\ntype PROFILE ={\n  age:number,\n  city:string;\n};\n\ntype LOGIN ={\n  username:string;\n  password:string;\n}\n\n\ntype USER =PROFILE & LOGIN;\n\nconst userA:USER ={\n  age:30,\n  city:\"tokyo\",\n  username:\"xxx\",\n  password:\"yyy\",\n}\n// Union Types\nlet value : boolean | number;\nvalue = 10;\n\nlet arrayUni : (number | string)[];\narray =[0,1,]\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n\n\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,OAAO,WAAW;AAAC;AAEnB,MAAMC,IAAI,GAAE,OAAO;AACnB,IAAIC,UAAU,GAAE,OAAO;AACvBA,UAAU,GAAE,QAAQ;AAEpB,IAAIC,QAAQ,GAAG,OAAO;AAEtB,IAAIC,OAAO,GAAE,CAAC;AAEd,IAAIC,IAAI,GAAE,IAAI;AAEd,IAAIC,KAAK,GAAE,CAAC,IAAI,EAAG,KAAK,EAAE,IAAI,CAAC;;AAE/B;AACA,IAAIC,MAAM,GAAG,CAAC,CAAC,EAAC,CAAC,EAAC,OAAO,CAAC;;AAE1B;;AAMA,IAAIC,OAAa,GAAE;EAACC,KAAK,EAAC,QAAQ;EAACC,IAAI,EAAC;AAAM,CAAC;AAE/C,MAAMC,KAAK,GAAE,CAACC,CAAU,EAAEC,CAAQ,KAAW;EAC3C,OAAOD,CAAC,GAAGC,CAAC;AACd,CAAC;;AAED;;AAcA,MAAMC,KAAU,GAAE;EAChBC,GAAG,EAAC,EAAE;EACNC,IAAI,EAAC,OAAO;EACZb,QAAQ,EAAC,KAAK;EACdc,QAAQ,EAAC;AACX,CAAC;AACD;AACA,IAAIC,KAAwB;AAC5BA,KAAK,GAAG,EAAE;AAEV,IAAIC,QAA8B;AAClCb,KAAK,GAAE,CAAC,CAAC,EAAC,CAAC,CAAE;AAEb,SAASc,GAAG,GAAG;EACb,oBACE;IAAK,SAAS,EAAC,KAAK;IAAA,uBAClB;MAAQ,SAAS,EAAC;IAAY;MAAA;MAAA;MAAA;IAAA;EAGrB;IAAA;IAAA;IAAA;EAAA,QACL;AAEV;AAAC,KATQA,GAAG;AAWZ,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}